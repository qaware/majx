buildscript {
    ext.kotlin_version = '1.3.72'

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.6.3'
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'org.jetbrains.dokka' version '0.10.1'
    id 'net.researchgate.release' version '2.6.0'
    id 'distribution'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.5'
}

group 'de.qaware.majx'

repositories {
    mavenCentral()
    jcenter() // Required for org.jetbrains.dokka
}

ext.versions = [
        jacksonVersion: '2.11.0'
]

dependencies {
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version

    // JSON Mapping
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jacksonVersion
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.datatype/jackson-datatype-joda
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-joda', version: versions.jacksonVersion

    // Assertions
    // Hamcrest for matcher implementation
    api group: 'org.hamcrest', name: 'hamcrest', version: '2.2'

    // Mustache
    implementation 'com.github.spullara.mustache.java:compiler:0.9.6'

    testImplementation "org.jetbrains.kotlin:kotlin-test"
    // https://mvnrepository.com/artifact/junit/junit
    testImplementation group: 'junit', name: 'junit', version: '4.13'
    // https://mvnrepository.com/artifact/com.google.guava/guava
    testImplementation group: 'com.google.guava', name: 'guava', version: '29.0-jre'
    // https://mvnrepository.com/artifact/commons-io/commons-io
    testImplementation group: 'commons-io', name: 'commons-io', version: '2.6'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

dokka {
    outputFormat = 'html'
    outputDirectory = javadoc.destinationDir
}

task javadocJar(type: Jar, dependsOn: dokka) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

coveralls {
    // Add kotlin source dir, since the coveralls plugin needs the sources and
    // does not pick it up automatically.
    // See https://github.com/kt3k/coveralls-gradle-plugin/issues/63
    sourceDirs += ['src/main/kotlin']
}

license {
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
    header file("LICENSE")
    strictCheck true
    include '**/*.kt'
    include '**/*.java'
}

release {
    preTagCommitMessage = '[#1] Gradle Release Plugin - pre tag commit: '
    tagCommitMessage = '[#1] Gradle Release Plugin - creating tag: '
    newVersionCommitMessage = '[#1] Gradle Release Plugin - new version: '
    tagTemplate = 'v${version}'
    buildTasks = ['clean', 'build']
}

task updateVersionInReadme {
    description = "Update the versions in the README to the current version"
    group = "release"
    doFirst {
        println "Updating version in README.md to ${version}."
        def newReadme = file('README.md').text
                .replaceAll(/<version>[\d.]+<\/version>/, "<version>${version}</version>")
                .replaceAll(
                        /testCompile group: 'de\.qaware\.majx', name: 'majx', version: '[\d.]+'/,
                        "testCompile group: 'de.qaware.majx', name: 'majx', version: '${version}'")

        file('README.md').write(newReadme)
    }
}

// Update versions in README before building the release
runBuildTasks.dependsOn updateVersionInReadme
// Trigger bintray upload at the end of the release
afterReleaseBuild.dependsOn bintrayUpload

def pomConfig = {

    inceptionYear '2017'

    scm {
        connection "scm:git:${project.scmUrl}"
        developerConnection "scm:git:${project.scmUrl}"
        url project.websiteUrl
    }

    issueManagement {
        system 'GitHub'
        url project.issueTrackerUrl
    }

    licenses {
        license([:]) {
            name 'MIT License'
            url 'https://opensource.org/licenses/MIT'
            distribution 'repo'
        }
    }

    organisation {
        name 'QAware GmbH'
        url 'https://www.qaware.de'
    }

    developers {
        developer {
            id 'clboettcher'
            name 'Claudius Boettcher'
            email 'claudius.boettcher@qaware.de'
            organization 'QAware GmbH'
            organizationUrl 'https://www.qaware.de'
            roles { role 'Developer' }
        }
    }
}

publishing {
    publications {
        majx(MavenPublication) {
            from components.java
            artifact javadocJar
            artifact sourcesJar

            pom.withXml {
                asNode().appendNode('packaging', 'jar')
                asNode().appendNode('name', project.fullName)
                asNode().appendNode('description', project.description)
                asNode().appendNode('url', project.websiteUrl)

                asNode().children().last() + pomConfig
            }
        }
    }
    repositories {
        // set the properties via -P to publish to your company repo
        maven {
            url = project.hasProperty('nexusUrl') ? project.nexusUrl : ''
            credentials {
                username = project.hasProperty('nexusUsername') ? project.nexusUsername : ''
                password = project.hasProperty('nexusPassword') ? project.nexusPassword : ''
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUsername') ? project.bintrayUsername : 'unknown'
    key = project.hasProperty('bintrayApiKey') ? project.bintrayApiKey : 'unknown'
    publications = ['majx']
    dryRun = false
    publish = true
    pkg {
        repo = project.bintrayRepo
        name = project.name
        desc = project.description
        licenses = ['MIT']
        labels = ['JSON', 'validation', 'matching', 'test', 'kotlin']
        websiteUrl = project.websiteUrl
        issueTrackerUrl = project.issueTrackerUrl
        vcsUrl = project.scmUrl
        publicDownloadNumbers = true
        version {
            name = project.version
            desc = project.description
            released = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZZ")
            vcsTag = "v${project.version}"
            mavenCentralSync {
                sync = true
            }
        }
    }
}

distributions {
    release {
        contents {
            from('build/libs') {
                include '*.jar'
            }
            from 'README.md'
            from 'LICENSE'
        }
    }
}

// Make sure the sources jar is there when packaging the
// distribution archives.
jar.finalizedBy sourcesJar

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}